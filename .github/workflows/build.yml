name: CMakeBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  configure_build_test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    # - uses: actions/checkout@v2
    # - uses: Dovyski/setup-opencv-action@v1.1
    #   with:
    #     opencv-version: '4.5.5'
    # run command sudo apt-get update
    - name: Update apt-get
      run: sudo apt-get update

    # - uses: actions/checkout@v3

    #----------------------------------------------------------------------------
    # deps
    #----------------------------------------------------------------------------

    # # it install apt packages and create caches
    # - uses: awalsh128/cache-apt-pkgs-action@latest
    #   with:
    #     packages: libassimp-dev
    #     version: 1.0.0
    #     # execute_install_scripts: true  # if the pkg cannot be cached

    # - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    #   run: cmake -S . -B build

    # - name: Build
    #   # Build your program with the given configuration
    #   # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    #   run: cmake --build build